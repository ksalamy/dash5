# Javascript Node CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.1/language-javascript/ for more details
#
orbs:
  aws-cli: circleci/aws-cli@1.3.0
  node: circleci/node@5.0.2
  serverless-framework: circleci/serverless-framework@1.0.1
executors:
  pw-focal-development:
    docker:
      - image: mcr.microsoft.com/playwright:v1.29.0-focal
    environment:
      NODE_ENV: development
version: 2.1
commands:
  setup-environment:
    steps:
      - run:
          name: Configure build variables
          command: |
            case $CIRCLE_BRANCH in
              staging)
                echo 'export STAGE="staging"' >> $BASH_ENV
                echo 'export CLIENT_S3_BUCKET_URL="s3://mbari-dash-staging" >> $BASH_ENV'
                echo 'export REACT_APP_API_URL=$API_URL_STAGING' >> $BASH_ENV
                echo 'export REACT_APP_STAGE="staging"' >> $BASH_ENV
                ;;

              main)
                echo 'export STAGE="prod"' >> $BASH_ENV
                echo 'export CLIENT_S3_BUCKET_URL="s3://mbari-dash-prod" >> $BASH_ENV'
                echo 'export REACT_APP_API_URL=$API_URL_PROD' >> $BASH_ENV
                echo 'export REACT_APP_STAGE="prod"' >> $BASH_ENV
                ;;

              *)
                echo 'export STAGE="dev"' >> $BASH_ENV
                echo 'export CLIENT_S3_BUCKET_URL="s3://mbari-dash-dev"' >> $BASH_ENV
                echo 'export REACT_APP_API_URL=$API_URL_DEV' >> $BASH_ENV
                echo 'export REACT_APP_STAGE="dev"' >> $BASH_ENV
                ;;
            esac
      - run:
          name: Load build variables
          command: source $BASH_ENV

  install-monorepo:
    steps:
      - restore-packages
      - run: |
          npm config set "@fortawesome:registry" https://npm.fontawesome.com/ && \
          npm config set "//npm.fontawesome.com/:_authToken" $FONT_AWESOME_TOKEN
      - run: |
          yarn install --network-concurrency 1
      - save_cache:
          key: v1-packages-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
            - apps/lrauv-dash2/node_modules
            - packages/react-ui/node_modules
            - packages/utils/node_modules
            - packages/api-client/node_modules

  restore-monorepo:
    steps:
      # Download pre-existing build from cache
      - restore_cache:
          keys:
            - v1-builds-{{ .Branch }}-{{ .Revision }}

  restore-packages:
    steps:
      # Download pre-existing build from cache
      - restore_cache:
          keys:
            - v1-packages-{{ checksum "yarn.lock" }}

  build-monorepo:
    steps:
      - run:
          name: Build with Turborepo
          command: yarn turbo run build
      - save_cache:
          paths:
            - apps/lrauv-dash2/.next
            - apps/lrauv-dash2/.turbo
            - packages/react-ui/dist
            - packages/react-ui/.turbo
            - packages/utils/dist
            - packages/utils/.turbo
            - node_modules/.cache
          key: v1-builds-{{ .Branch }}-{{ .Revision }}

jobs:
  build:
    resource_class: large
    executor:
      name: node/default
      tag: '16.18.1'
    steps:
      - checkout
      - setup-environment
      - install-monorepo
      - build-monorepo

  lint:
    resource_class: xlarge
    parallelism: 1
    executor:
      name: node/default
      tag: '16.18.1'
    steps:
      - checkout
      - setup-environment
      - restore-packages
      - restore-monorepo
      - install-monorepo
      - run:
          command: yarn lint
          name: Run eslint across all projects.

  test_ui:
    resource_class: xlarge
    parallelism: 1
    executor:
      name: node/default
      tag: '16.18.1'
    steps:
      - checkout
      - setup-environment
      - restore-packages
      - restore-monorepo
      - install-monorepo
      - run:
          command: yarn turbo run test --filter=@mbari/react-ui
          name: Run react-ui tests

  test_api:
    resource_class: large
    parallelism: 1
    executor:
      name: node/default
      tag: '16.18.1'
    steps:
      - checkout
      - setup-environment
      - restore-packages
      - restore-monorepo
      - install-monorepo
      - run:
          command: yarn turbo run test --filter=@mbari/api-client
          name: Run turbo repo tests

  test_utils:
    resource_class: medium
    parallelism: 1
    executor:
      name: node/default
      tag: '16.18.1'
    steps:
      - checkout
      - setup-environment
      - restore-packages
      - restore-monorepo
      - install-monorepo
      - run:
          command: yarn turbo run test --filter=@mbari/utils
          name: Run turbo repo tests

  test_dash:
    resource_class: large
    parallelism: 1
    executor:
      name: pw-focal-development
    steps:
      - checkout
      - setup-environment
      - restore-packages
      - restore-monorepo
      - install-monorepo
      - run:
          command: npx playwright install
          name: Install playwright
      - run:
          command: yarn turbo run test --filter=lrauv-dash2
          name: Run turbo repo tests
      - store_artifacts:
          path: ~/project/apps/lrauv-dash2/test-results
          when: always

  deploy_ui:
    resource_class: xlarge
    executor:
      name: node/default
      tag: '16.18.1'
    steps:
      - checkout
      - setup-environment
      - restore-packages
      - restore-monorepo
      - install-monorepo
      - aws-cli/setup:
          profile-name: AWS_PROFILE_NAME
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_ACCESS_DEFAULT_REGION
      - run:
          command: yarn workspace @mbari/react-ui build:storybook
          name: build storybook
      - run:
          command: cd packages/react-ui && aws s3 cp build $CLIENT_S3_BUCKET_URL --recursive
          name: deploy

  deploy_dash:
    executor:
      name: node/default
      tag: '16.18.1'
    steps:
      - checkout
      - setup-environment
      - restore-packages
      - restore-monorepo
      - install-monorepo
      - run: |
          prodRun=""
          if [[ ${CIRCLE_BRANCH} == "main" ]]; then
            prodRun="--prod"
          fi

          npx vercel --token ${VERCEL_TOKEN} $prodRun

workflows:
  build_and_deploy:
    jobs:
      - build
      - test_utils:
          requires:
            - build
      - lint:
          requires:
            - build
      - test_dash:
          requires:
            - build
      - test_ui:
          requires:
            - build
      - test_api:
          requires:
            - build
      - deploy_ui:
          requires:
            - test_ui
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - deploy_dash:
          requires:
            - test_utils
            - test_dash
            - test_ui
            - test_api
            - lint
          filters:
            branches:
              only:
                - develop
                - staging
                - master
                - main
